package Literarium;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Clarissa Audrey Fabiola
 */
public class Admin extends javax.swing.JFrame {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        borderPanel = new javax.swing.JPanel();
        adminScreen = new javax.swing.JTabbedPane();
        bookManagementTab = new javax.swing.JPanel();
        pageTitle1 = new javax.swing.JLabel();
        bookIDSubtitle = new javax.swing.JLabel();
        bookIdLabel = new javax.swing.JTextField();
        titleSubtitle = new javax.swing.JLabel();
        bookTitleLabel = new javax.swing.JTextField();
        priceSubtitle = new javax.swing.JLabel();
        deleteBook = new javax.swing.JButton();
        clearBook = new javax.swing.JButton();
        bookInventoryTableScroll = new javax.swing.JScrollPane();
        bookInventoryTable = new javax.swing.JTable();
        bookInventorySubtitle = new javax.swing.JLabel();
        updateBook = new javax.swing.JButton();
        addBook = new javax.swing.JButton();
        bookQtyLabel = new javax.swing.JTextField();
        bookPriceLabel = new javax.swing.JTextField();
        bookAuthorLabel = new javax.swing.JTextField();
        authorSubtitle = new javax.swing.JLabel();
        bookImageLabel = new javax.swing.JLabel();
        qtySubtitle = new javax.swing.JLabel();
        bookImage = new javax.swing.JTextField();
        bookSynopsis = new javax.swing.JTextField();
        uploadImage = new javax.swing.JButton();
        uploadSynopsis = new javax.swing.JButton();
        bookSynopsisScroll = new javax.swing.JScrollPane();
        bookSynopsisLabel = new javax.swing.JLabel();
        customerManagementTab = new javax.swing.JPanel();
        pageTitle2 = new javax.swing.JLabel();
        customerIDSubtitle = new javax.swing.JLabel();
        customerIdLabel = new javax.swing.JTextField();
        nameSubtitle = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JTextField();
        passwordSubtitle = new javax.swing.JLabel();
        customerPasswordLabel = new javax.swing.JTextField();
        genderSubtitle = new javax.swing.JLabel();
        customerGender = new javax.swing.JComboBox<>();
        addCustomer = new javax.swing.JButton();
        updateCustomer = new javax.swing.JButton();
        deleteCustomer = new javax.swing.JButton();
        clearCustomer = new javax.swing.JButton();
        customerInventoryTableScroll = new javax.swing.JScrollPane();
        customerInventoryTable = new javax.swing.JTable();
        customerInventorySubtitle = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        logout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        borderPanel.setBackground(new java.awt.Color(217, 185, 155));

        adminScreen.setForeground(new java.awt.Color(123, 63, 0));
        adminScreen.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N

        bookManagementTab.setBackground(new java.awt.Color(250, 250, 250));

        pageTitle1.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 36)); // NOI18N
        pageTitle1.setForeground(new java.awt.Color(123, 63, 0));
        pageTitle1.setText("BOOK MANAGEMENT");

        bookIDSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        bookIDSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        bookIDSubtitle.setText("BOOK ID");

        bookIdLabel.setEditable(false);
        bookIdLabel.setBackground(new java.awt.Color(250, 250, 250));
        bookIdLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        bookIdLabel.setBorder(null);

        titleSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        titleSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        titleSubtitle.setText("TITLE");

        bookTitleLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        priceSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        priceSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        priceSubtitle.setText("PRICE");

        deleteBook.setBackground(new java.awt.Color(123, 63, 0));
        deleteBook.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        deleteBook.setForeground(new java.awt.Color(255, 255, 255));
        deleteBook.setText("Delete");
        deleteBook.setBorder(null);
        deleteBook.setBorderPainted(false);
        deleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookActionPerformed(evt);
            }
        });

        clearBook.setBackground(new java.awt.Color(123, 63, 0));
        clearBook.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        clearBook.setForeground(new java.awt.Color(255, 255, 255));
        clearBook.setText("Clear");
        clearBook.setBorder(null);
        clearBook.setBorderPainted(false);
        clearBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBookActionPerformed(evt);
            }
        });

        bookInventoryTable.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        bookInventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BOOK ID", "TITLE", "PRICE", "QUANTITY", "AUTHOR"
            }
        ) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false; // Make all cells non-editable
            }
        });
        bookInventoryTable.setSelectionBackground(new java.awt.Color(217, 185, 155));
        bookInventoryTable.setSelectionForeground(new java.awt.Color(102, 102, 102));
        bookInventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookInventoryTableMouseClicked(evt);
            }
        });
        bookInventoryTableScroll.setViewportView(bookInventoryTable);

        bookInventorySubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 20)); // NOI18N
        bookInventorySubtitle.setForeground(new java.awt.Color(123, 63, 0));
        bookInventorySubtitle.setText("Book Inventory");

        updateBook.setBackground(new java.awt.Color(123, 63, 0));
        updateBook.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateBook.setForeground(new java.awt.Color(255, 255, 255));
        updateBook.setText("Update");
        updateBook.setBorder(null);
        updateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookActionPerformed(evt);
            }
        });

        addBook.setBackground(new java.awt.Color(123, 63, 0));
        addBook.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addBook.setForeground(new java.awt.Color(255, 255, 255));
        addBook.setText("Add");
        addBook.setBorder(null);
        addBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookActionPerformed(evt);
            }
        });

        bookQtyLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        bookPriceLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        bookAuthorLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        authorSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        authorSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        authorSubtitle.setText("AUTHOR");

        bookImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        qtySubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        qtySubtitle.setForeground(new java.awt.Color(123, 63, 0));
        qtySubtitle.setText("QUANTITY");

        bookImage.setEditable(false);
        bookImage.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        bookSynopsis.setEditable(false);
        bookSynopsis.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        uploadImage.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        uploadImage.setText("Upload");
        uploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageActionPerformed(evt);
            }
        });

        uploadSynopsis.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        uploadSynopsis.setText("Upload");
        uploadSynopsis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadSynopsisActionPerformed(evt);
            }
        });

        bookSynopsisLabel.setBackground(new java.awt.Color(255, 255, 255));
        bookSynopsisLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        bookSynopsisLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bookSynopsisLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        bookSynopsisScroll.setViewportView(bookSynopsisLabel);

        javax.swing.GroupLayout bookManagementTabLayout = new javax.swing.GroupLayout(bookManagementTab);
        bookManagementTab.setLayout(bookManagementTabLayout);
        bookManagementTabLayout.setHorizontalGroup(
            bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookManagementTabLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qtySubtitle)
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceSubtitle)
                            .addComponent(titleSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookIDSubtitle)
                            .addComponent(authorSubtitle))))
                .addGap(23, 23, 23)
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookQtyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bookSynopsis, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uploadSynopsis)
                        .addGap(167, 167, 167))
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addBook, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(updateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42))
                            .addGroup(bookManagementTabLayout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bookImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bookImage))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(uploadImage)))
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bookManagementTabLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(clearBook, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addComponent(bookSynopsisScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(118, 118, 118))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                        .addComponent(bookInventoryTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                        .addComponent(bookInventorySubtitle)
                        .addGap(541, 541, 541))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementTabLayout.createSequentialGroup()
                        .addComponent(pageTitle1)
                        .addGap(411, 411, 411))))
        );
        bookManagementTabLayout.setVerticalGroup(
            bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookManagementTabLayout.createSequentialGroup()
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookIDSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(authorSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookQtyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qtySubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pageTitle1)
                        .addGap(10, 10, 10)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bookImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookSynopsisScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookImage, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uploadImage)))
                    .addGroup(bookManagementTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookSynopsis, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uploadSynopsis))))
                .addGap(24, 24, 24)
                .addGroup(bookManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBook, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBook, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bookInventorySubtitle)
                .addGap(18, 18, 18)
                .addComponent(bookInventoryTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        adminScreen.addTab("Book Management", bookManagementTab);

        customerManagementTab.setBackground(new java.awt.Color(250, 250, 250));

        pageTitle2.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 36)); // NOI18N
        pageTitle2.setForeground(new java.awt.Color(123, 63, 0));
        pageTitle2.setText("CUSTOMER MANAGEMENT");

        customerIDSubtitle.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        customerIDSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        customerIDSubtitle.setText("CUSTOMER ID");

        customerIdLabel.setEditable(false);
        customerIdLabel.setBackground(new java.awt.Color(250, 250, 250));
        customerIdLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        customerIdLabel.setBorder(null);

        nameSubtitle.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        nameSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        nameSubtitle.setText("NAME");

        customerNameLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        passwordSubtitle.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        passwordSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        passwordSubtitle.setText("PASSWORD");

        customerPasswordLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N

        genderSubtitle.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        genderSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        genderSubtitle.setText("GENDER");

        customerGender.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        customerGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"", "Male", "Female" }));

        addCustomer.setBackground(new java.awt.Color(123, 63, 0));
        addCustomer.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addCustomer.setForeground(new java.awt.Color(255, 255, 255));
        addCustomer.setText("Add");
        addCustomer.setBorder(null);
        addCustomer.setBorderPainted(false);
        addCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerActionPerformed(evt);
            }
        });

        updateCustomer.setBackground(new java.awt.Color(123, 63, 0));
        updateCustomer.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        updateCustomer.setForeground(new java.awt.Color(255, 255, 255));
        updateCustomer.setText("Update");
        updateCustomer.setBorder(null);
        updateCustomer.setBorderPainted(false);
        updateCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerActionPerformed(evt);
            }
        });

        deleteCustomer.setBackground(new java.awt.Color(123, 63, 0));
        deleteCustomer.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        deleteCustomer.setForeground(new java.awt.Color(255, 255, 255));
        deleteCustomer.setText("Delete");
        deleteCustomer.setBorder(null);
        deleteCustomer.setBorderPainted(false);
        deleteCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerActionPerformed(evt);
            }
        });

        clearCustomer.setBackground(new java.awt.Color(123, 63, 0));
        clearCustomer.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        clearCustomer.setForeground(new java.awt.Color(255, 255, 255));
        clearCustomer.setText("Clear");
        clearCustomer.setBorder(null);
        clearCustomer.setBorderPainted(false);
        clearCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCustomerActionPerformed(evt);
            }
        });

        customerInventoryTable.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        customerInventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CUSTOMER ID", "PASSWORD", "NAME", "GENDER"
            }
        ) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false; // Make all cells non-editable
            }
        }
    );
    customerInventoryTable.setSelectionBackground(new java.awt.Color(217, 185, 155));
    customerInventoryTable.setSelectionForeground(new java.awt.Color(102, 102, 102));
    customerInventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            customerInventoryTableMouseClicked(evt);
        }
    });
    customerInventoryTableScroll.setViewportView(customerInventoryTable);

    customerInventorySubtitle.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
    customerInventorySubtitle.setForeground(new java.awt.Color(123, 63, 0));
    customerInventorySubtitle.setText("Customer Inventory");

    javax.swing.GroupLayout customerManagementTabLayout = new javax.swing.GroupLayout(customerManagementTab);
    customerManagementTab.setLayout(customerManagementTabLayout);
    customerManagementTabLayout.setHorizontalGroup(
        customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerManagementTabLayout.createSequentialGroup()
            .addContainerGap(202, Short.MAX_VALUE)
            .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerManagementTabLayout.createSequentialGroup()
                    .addComponent(nameSubtitle)
                    .addGap(46, 46, 46)
                    .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(customerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(customerManagementTabLayout.createSequentialGroup()
                            .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(70, 70, 70)
                            .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(customerPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(customerManagementTabLayout.createSequentialGroup()
                                    .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(genderSubtitle)
                                        .addGroup(customerManagementTabLayout.createSequentialGroup()
                                            .addComponent(updateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(72, 72, 72)
                                            .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(customerManagementTabLayout.createSequentialGroup()
                                            .addGap(59, 59, 59)
                                            .addComponent(clearCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(customerManagementTabLayout.createSequentialGroup()
                                            .addGap(67, 67, 67)
                                            .addComponent(customerGender, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customerManagementTabLayout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(customerInventorySubtitle)))))
                    .addGap(226, 226, 226))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerManagementTabLayout.createSequentialGroup()
                    .addComponent(customerInventoryTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(165, 165, 165))))
        .addGroup(customerManagementTabLayout.createSequentialGroup()
            .addGap(256, 256, 256)
            .addComponent(customerIDSubtitle)
            .addGap(18, 18, 18)
            .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pageTitle2)
                .addGroup(customerManagementTabLayout.createSequentialGroup()
                    .addComponent(customerIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(180, 180, 180)
                    .addComponent(passwordSubtitle)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    customerManagementTabLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {customerGender, customerIdLabel, customerNameLabel, customerPasswordLabel});

    customerManagementTabLayout.setVerticalGroup(
        customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(customerManagementTabLayout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addComponent(pageTitle2)
            .addGap(53, 53, 53)
            .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(customerIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(passwordSubtitle)
                .addComponent(customerPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(customerIDSubtitle))
            .addGap(18, 18, 18)
            .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(customerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(nameSubtitle)
                .addComponent(genderSubtitle)
                .addComponent(customerGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(38, 38, 38)
            .addGroup(customerManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(updateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(clearCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(33, 33, 33)
            .addComponent(customerInventorySubtitle)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(customerInventoryTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(72, Short.MAX_VALUE))
    );

    customerManagementTabLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {customerGender, customerIdLabel, customerNameLabel, customerPasswordLabel});

    adminScreen.addTab("Customer Management", customerManagementTab);

    logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Literarium/Images/Logo2.png"))); // NOI18N

    logout.setBackground(new java.awt.Color(217, 185, 155));
    logout.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N
    logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Literarium/Images/Logout.png"))); // NOI18N
    logout.setBorderPainted(false);
    logout.setContentAreaFilled(false);
    logout.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logoutActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout borderPanelLayout = new javax.swing.GroupLayout(borderPanel);
    borderPanel.setLayout(borderPanelLayout);
    borderPanelLayout.setHorizontalGroup(
        borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(borderPanelLayout.createSequentialGroup()
            .addGroup(borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(borderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(adminScreen))
                .addGroup(borderPanelLayout.createSequentialGroup()
                    .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logout)))
            .addContainerGap())
    );
    borderPanelLayout.setVerticalGroup(
        borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, borderPanelLayout.createSequentialGroup()
            .addGroup(borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(borderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(adminScreen))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(borderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(borderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializes the components of the admin page.
     */
    public Admin() {
        initComponents();
        
        // Book management
        // Convert book.txt into rows of a table.
        try { 
            String fileName = "book.txt";
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);  
            DefaultTableModel model = (DefaultTableModel) bookInventoryTable.getModel();
            
            String line;
            
            while ((line = br.readLine()) != null) {
                if (line != null) {
                    String[] dataRow = line.split("/");
                    // Add the row to the table model
                    model.addRow(dataRow);
                }
            }   
     
        } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
        
        // Customer management
        // Convert customer.txt into rows of a table.
        try {
            String fileName = "customer.txt";
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);
            DefaultTableModel model = (DefaultTableModel) customerInventoryTable.getModel();

            String line;

            while ((line = br.readLine()) != null) {
                if (line != null) {
                    String[] dataRow = line.split("/");
                    // Add the row to the table model
                    model.addRow(dataRow);
                }
            }
        } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
    }
    
    /**
     * addBookActionPerformed
     * This method is called when the "Add" button on book management is clicked.
     * @param evt 
     */
    private void addBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookActionPerformed
        if (bookTitleLabel.getText().isEmpty() || bookPriceLabel.getText().isEmpty() || bookQtyLabel.getText().isEmpty() || bookAuthorLabel.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Missing required information. Please complete all fields.");
            return;
        }

        try {
            int qty = Integer.parseInt(bookQtyLabel.getText());
            int price = Integer.parseInt(bookPriceLabel.getText());
            if (qty <= 0 || price <= 0) {
                JOptionPane.showMessageDialog(null, "Please enter only a positive integer.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter only a positive integer.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) bookInventoryTable.getModel();

        // Generate the new book ID
        String newId;
        if (model.getRowCount() == 0) {
            newId = "10010"; 
        } else {
            // Find the largest ID in the existing data and increment it by 1
            int maxId = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                String id = model.getValueAt(i, 0).toString();
                int currentId = Integer.parseInt(id);
                if (currentId > maxId) {
                    maxId = currentId;
                }
            }
            newId = String.valueOf(maxId + 1);
        }

        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new BookManagement();

        bookStoreArray[0].setId(newId);
        bookStoreArray[0].setName(bookTitleLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setPrice(bookPriceLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setQty(bookQtyLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setAuthor(bookAuthorLabel.getText().trim());

        // Adding book details to the database
        addBookToDataBase(
            bookStoreArray[0].getId(),
            bookStoreArray[0].getName(),
            ((BookManagement) bookStoreArray[0]).getPrice(),
            ((BookManagement) bookStoreArray[0]).getQty(),
            ((BookManagement) bookStoreArray[0]).getAuthor()
        );

        // Adding data to Jtable
        model.addRow(new Object[]{
            bookStoreArray[0].getId(),
            bookStoreArray[0].getName(),
            ((BookManagement) bookStoreArray[0]).getPrice(),
            ((BookManagement) bookStoreArray[0]).getQty(),
            ((BookManagement) bookStoreArray[0]).getAuthor()
        });

        JOptionPane.showMessageDialog(null, "Data successfully added!");

        bookIdLabel.setText(null);
        bookTitleLabel.setText(null);
        bookPriceLabel.setText(null);
        bookQtyLabel.setText(null);
        bookAuthorLabel.setText(null);
        bookImageLabel.setIcon(null);
        bookSynopsisLabel.setText(null);
        bookImage.setText(null);
        bookSynopsis.setText(null);
    }//GEN-LAST:event_addBookActionPerformed

    /**
     * updateBookActionPerformed
     * This method is called when the "Update" button on book management is clicked.
     * @param evt 
     */
    private void updateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookActionPerformed
        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new BookManagement();

        bookStoreArray[0].setId(bookIdLabel.getText().trim());
        bookStoreArray[0].setName(bookTitleLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setPrice(bookPriceLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setQty(bookQtyLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setAuthor(bookAuthorLabel.getText().trim());

        // Validate quantity and price inputs
        try {
            int qty = Integer.parseInt(bookQtyLabel.getText());
            int price = Integer.parseInt(bookPriceLabel.getText());
            if (qty <= 0 || price <= 0) {
                JOptionPane.showMessageDialog(null, "Please enter only a positive integer.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter only a positive integer.");
            return;
        }

        // Update book details to the database
        removeBookFromDataBase(bookStoreArray[0].getId());
        addBookToDataBase(
            bookStoreArray[0].getId(),
            bookStoreArray[0].getName(),
            ((BookManagement) bookStoreArray[0]).getPrice(),
            ((BookManagement) bookStoreArray[0]).getQty(),
            ((BookManagement) bookStoreArray[0]).getAuthor()
        );

        DefaultTableModel model = (DefaultTableModel) bookInventoryTable.getModel();
        
        // If a single row is selected
        if (bookInventoryTable.getSelectedRowCount() == 1) {
            if (bookIdLabel.getText().isEmpty() || bookTitleLabel.getText().isEmpty() || bookPriceLabel.getText().isEmpty() || bookQtyLabel.getText().toString().isEmpty() || bookAuthorLabel.getText().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Missing required information. Please complete all fields.");
                return;
            }
            
            // Update the table with updated value
            model.setValueAt(bookStoreArray[0].getId(), bookInventoryTable.getSelectedRow(), 0);
            model.setValueAt(bookStoreArray[0].getName(), bookInventoryTable.getSelectedRow(), 1);
            model.setValueAt(((BookManagement) bookStoreArray[0]).getPrice(), bookInventoryTable.getSelectedRow(), 2);
            model.setValueAt(((BookManagement) bookStoreArray[0]).getQty(), bookInventoryTable.getSelectedRow(), 3);
            model.setValueAt(((BookManagement) bookStoreArray[0]).getAuthor(), bookInventoryTable.getSelectedRow(), 4);

            JOptionPane.showMessageDialog(null, "Data successfully updated!");
        } else {
            if (bookInventoryTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No data available in the table.");
            } else if (bookInventoryTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
            } else {
            // If multiple rows are selected
                JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
            }

        }

        bookIdLabel.setText(null);
        bookTitleLabel.setText(null);
        bookPriceLabel.setText(null);
        bookQtyLabel.setText(null);
        bookAuthorLabel.setText(null);
        bookImageLabel.setIcon(null);
        bookSynopsisLabel.setText(null);
        bookImage.setText(null);
        bookSynopsis.setText(null);
    }//GEN-LAST:event_updateBookActionPerformed

    /**
     * bookInventoryTableMouseClicked
     * This method is called when the user clicks on a row in the bookInventoryTable component.
     * Retrieves relevant data from the selected row index and populate labels and image icon.
     * @param evt The mouse click event.
     */
    private void bookInventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookInventoryTableMouseClicked
        // Set Data to their Text Field
        int index = bookInventoryTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) bookInventoryTable.getModel();

        bookIdLabel.setText(model.getValueAt(index, 0).toString());
        bookTitleLabel.setText(model.getValueAt(index, 1).toString());
        bookPriceLabel.setText(model.getValueAt(index, 2).toString());
        bookQtyLabel.setText(model.getValueAt(index, 3).toString());
        bookAuthorLabel.setText(model.getValueAt(index, 4).toString());

        String id = model.getValueAt(index, 0).toString();

        // Set image path if file exists
        String imagePath = "src/Books/" + id + ".jpg";
        File imageFile = new File(imagePath);
        if (imageFile.exists()) {
            bookImage.setText(imagePath);
            try {
                ImageIcon icon = new ImageIcon(imagePath);
                Image image = icon.getImage().getScaledInstance(bookImageLabel.getWidth(), bookImageLabel.getHeight(), Image.SCALE_SMOOTH);
                bookImageLabel.setIcon(new ImageIcon(image));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error loading image");
            }
        } else {
            bookImage.setText(null);
            bookImageLabel.setIcon(null);
        }

        // Set synopsis path if file exists
        String synopsisPath = "src/Books/" + id + ".txt";
        File synopsisFile = new File(synopsisPath);
        if (synopsisFile.exists()) {
            bookSynopsis.setText(synopsisPath);
            String bookSynopsis = readTextFromFile(synopsisPath);
            // Set the font and text style for the book synopsis
            bookSynopsisLabel.setText("<html>" + wrapText(bookSynopsis, bookSynopsisLabel.getWidth(), bookSynopsisLabel.getHeight()) + "</html>");
            Font labelFont = bookSynopsisLabel.getFont();
            bookSynopsisLabel.setFont(new Font(labelFont.getName(), Font.PLAIN, 13));
        } else {
            bookSynopsis.setText(null);
            bookSynopsisLabel.setText(null);
        }
    }//GEN-LAST:event_bookInventoryTableMouseClicked

     /**
     * readTextFromFile
     * This method reads the content from a file and returns it as a string.
     * @param fileName
     * @return 
     */
    private String readTextFromFile(String fileName) {
        StringBuilder sb = new StringBuilder();

        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);  

            String line;

            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
        
        return sb.toString();
    }
    
    /**
     * wrapText
     * This method wraps a given text to fit within the specified width and height, 
     * adding line breaks if necessary.
     * @param text
     * @param width
     * @param height
     * @return 
     */
    private String wrapText(String text, int width, int height) {
        FontMetrics metrics = bookSynopsisLabel.getFontMetrics(bookSynopsisLabel.getFont());
        StringBuilder wrappedText = new StringBuilder();

        // Line width and height represents the maximum size available for displaying text on a single line
        int lineWidth = 0;
        
        // Split a string by space or whitespace characters
        String[] words = text.split("\\s+"); 

        for (String word : words) {
            int wordWidth = metrics.stringWidth(word);
            int wordWithSpaceWidth = wordWidth + metrics.stringWidth(" ");
            
            if (lineWidth + wordWithSpaceWidth <= width) {
                wrappedText.append(word).append(" ");
                lineWidth += wordWithSpaceWidth;
            } else {
                wrappedText.append("<br>").append(word).append(" ");
                lineWidth = wordWithSpaceWidth;
            }
        }
        return wrappedText.toString();
    }
    
     /**
     * clearBookActionPerformed
     * This method is called when the "Clear" button is clicked.
     * It resets the values of various UI components.
     * @param evt 
     */
    private void clearBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBookActionPerformed
        bookIdLabel.setText(null);
        bookTitleLabel.setText(null);
        bookPriceLabel.setText(null);
        bookQtyLabel.setText(null);
        bookAuthorLabel.setText(null);
        bookImageLabel.setIcon(null);
        bookSynopsisLabel.setText(null);
        bookImage.setText(null);
        bookSynopsis.setText(null);
    }//GEN-LAST:event_clearBookActionPerformed
    
    /**
     * deleteBookActionPerformed
     * This method is called when the "Delete" button on book management is clicked.
     * @param evt 
     */
    private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookActionPerformed
        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new BookManagement();

        bookStoreArray[0].setId(bookIdLabel.getText().trim());
        bookStoreArray[0].setName(bookTitleLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setPrice(bookPriceLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setQty(bookQtyLabel.getText().trim());
        ((BookManagement) bookStoreArray[0]).setAuthor(bookAuthorLabel.getText().trim());
  
        // Delete book data from the database
        removeBookFromDataBase(bookStoreArray[0].getId());

        DefaultTableModel model = (DefaultTableModel) bookInventoryTable.getModel();
                
        if (bookInventoryTable.getSelectedRowCount() == 1) {
            model.removeRow(bookInventoryTable.getSelectedRow());
            JOptionPane.showMessageDialog(null, "Book successfully deleted.");
        } else if (bookInventoryTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No data available in the table.");
        } else if (customerInventoryTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
        // If multiple rows are selected
        } else {
            JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
        }
        
        bookIdLabel.setText(null);
        bookTitleLabel.setText(null);
        bookPriceLabel.setText(null);
        bookQtyLabel.setText(null);
        bookAuthorLabel.setText(null);
        bookImageLabel.setIcon(null);
        bookSynopsisLabel.setText(null);
        bookImage.setText(null);
        bookSynopsis.setText(null);
    }//GEN-LAST:event_deleteBookActionPerformed

    /**
    * uploadImageActionPerformed
    * This method is called when the "Upload" button is clicked.
    * It handles the process of uploading an image file to the destination directory.
    * @param evt
    */
    private void uploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Upload Image");
        int option = fileChooser.showOpenDialog(this);

        // To check if the user has chosen a file or directory and confirmed their selection. 
        if (option == JFileChooser.APPROVE_OPTION) {
            try {
                File sourceFile = fileChooser.getSelectedFile();
                String imageName = JOptionPane.showInputDialog("Enter the image name:");
                String destinationPath = "src/Books/" + imageName;
                File destinationFile = new File(destinationPath);

                // Create the destination directory if it doesn't exist
                File destinationDir = destinationFile.getParentFile();
                if (!destinationDir.exists()) {
                    destinationDir.mkdirs();
                }

                if (destinationFile.exists()) {
                    int confirm = JOptionPane.showConfirmDialog(this, "A file with the same name already exists. Do you want to overwrite it?", "File Exists", JOptionPane.YES_NO_OPTION);

                    // User chose not to overwrite the file
                    if (confirm == JOptionPane.NO_OPTION) {
                        return; 
                    } else {
                        // Copy the source file to the destination file, replacing the existing file
                        Files.copy(sourceFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                        JOptionPane.showMessageDialog(this, "Image uploaded successfully!");
                        return;
                    }
                }
                
                // Copy the source file to the destination file
                Files.copy(sourceFile.toPath(), destinationFile.toPath());

                JOptionPane.showMessageDialog(this, "Image uploaded successfully!");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error in uploading the image.");
            }
        }
    }//GEN-LAST:event_uploadImageActionPerformed

   /**
    * uploadSynopsisActionPerformed
    * This method is called when the "Upload" button is clicked.
    * It handles the process of uploading an txt file to the destination directory.
    * @param evt
    */
    private void uploadSynopsisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadSynopsisActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Upload txt file");
        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            try {
                File sourceFile = fileChooser.getSelectedFile();
                String txtName = JOptionPane.showInputDialog("Enter the txt file name:");
                String destinationPath = "src/Books/" + txtName;
                File destinationFile = new File(destinationPath);

                // Create the destination directory if it doesn't exist
                File destinationDir = destinationFile.getParentFile();
                if (!destinationDir.exists()) {
                    destinationDir.mkdirs();
                }

                if (destinationFile.exists()) {
                    int confirm = JOptionPane.showConfirmDialog(this, "A file with the same name already exists. Do you want to overwrite it?", "File Exists", JOptionPane.YES_NO_OPTION);

                    // User chose not to overwrite the file
                    if (confirm == JOptionPane.NO_OPTION) {
                        return; 
                    } else {
                        // Copy the source file to the destination file, replacing the existing file
                        Files.copy(sourceFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                        JOptionPane.showMessageDialog(this, "Txt file uploaded successfully!");
                        return;
                    }
                }

                // Copy the source file to the destination file
                Files.copy(sourceFile.toPath(), destinationFile.toPath());

                JOptionPane.showMessageDialog(this, "Txt file uploaded successfully!");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error in uploading the txt file.");
            }
        }
    }//GEN-LAST:event_uploadSynopsisActionPerformed

     /**
     * removeBookFromDataBase
     * This method is used to remove specific line from the "book.txt" based on the book ID
     * user chose.
     * @param id 
     */
    private void removeBookFromDataBase(String id) {
        String fileName = "book.txt";
        String tempFile = "temp.txt";
        
        File oldFile = new File(fileName);
        File newFile = new File(tempFile);
        
        try {

            FileReader fr = new FileReader(oldFile);
            BufferedReader br = new BufferedReader(fr);
            
            FileWriter fw = new FileWriter(newFile);
            BufferedWriter bw = new BufferedWriter(fw);
            
            String line;
            
            while ((line = br.readLine()) != null) {
                int slashIndex = line.indexOf("/");
                if (slashIndex != -1) {
                    String specifiedId = line.substring(0, slashIndex);
                    // Skipping the data line that corresponds to the ID user chose to order
                    if (specifiedId.equals(id)) {
                        continue;
                    }
                }
                // Write non-matching lines to "temp.txt"
                bw.write(line);
                bw.newLine();
            }
            bw.close();
            fr.close();
            
            oldFile.delete();
            newFile.renameTo(oldFile);
//            System.out.println(new File(".").getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in deleting data from txt file.");
        }
    }

     /**
     * addBookToDataBase
     * This method is used to add a new line of data to the "book.txt" file to update data.
     * @param id
     * @param name
     * @param price
     * @param qty
     * @param author 
     */
        private void addBookToDataBase(String id, String name, String price, String qty, String author) {
        try {
            // Append data to existing file
            FileWriter fw = new FileWriter("book.txt", true);
            fw.write(id + "/" + name + "/" + price + "/" + qty + "/" + author);
            fw.write(System.getProperty("line.separator"));
            fw.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in adding data to txt file.");
     }
    }
    
        
    /**
     * addCustomerActionPerformed
     * This method is called when the "Add" button on customer management is clicked.
     * It handles the process of adding a new customer to the inventory.
     * @param evt 
     */
    private void addCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerActionPerformed
        if (customerPasswordLabel.getText().isEmpty() || customerNameLabel.getText().isEmpty() || customerGender.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Missing required information. Please complete all fields.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) customerInventoryTable.getModel();
        
        // Check if maximum customer account count has been reached
        if (model.getRowCount() >= 15) {
            JOptionPane.showMessageDialog(null, "Maximum customer account reached!");
            return;
        }

        // Generate the new Customer ID
        String newId;
        if (model.getRowCount() == 0) {
            newId = "11110"; 
        } else {
            // Find the largest ID in the existing data and increment it by 1
            int maxId = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                String id = model.getValueAt(i, 0).toString();
                int currentId = Integer.parseInt(id);
                if (currentId > maxId) {
                    maxId = currentId;
                }
            }
            newId = String.valueOf(maxId + 1);
        }

        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new CustomerManagement();

        bookStoreArray[0].setId(newId);
        ((CustomerManagement) bookStoreArray[0]).setcustPassword(customerPasswordLabel.getText().trim());
        bookStoreArray[0].setName(customerNameLabel.getText().trim());
        ((CustomerManagement) bookStoreArray[0]).setcustGender(customerGender.getSelectedItem().toString().trim());

        // Adding customer details to the database
        addCustomerToDataBase(
            bookStoreArray[0].getId(),
            ((CustomerManagement) bookStoreArray[0]).getcustPassword(),
            bookStoreArray[0].getName(),
            ((CustomerManagement) bookStoreArray[0]).getcustGender()
        );

        // Adding data to Jtable
        model.addRow(new Object[]{
            bookStoreArray[0].getId(),
            ((CustomerManagement) bookStoreArray[0]).getcustPassword(),
            bookStoreArray[0].getName(),
            ((CustomerManagement) bookStoreArray[0]).getcustGender()
        });

        JOptionPane.showMessageDialog(null, "Data successfully added!");

        customerPasswordLabel.setText(null);
        customerNameLabel.setText(null);
        customerGender.setSelectedItem(null);
    }//GEN-LAST:event_addCustomerActionPerformed

    /**
     * updateCustomerActionPerformed
     * This method is called when the "Update" button on customer management is clicked.
     * @param evt 
     */
    private void updateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerActionPerformed
        // Setting the updated book details to the CustomerManagement instance
        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new CustomerManagement();

        bookStoreArray[0].setId(customerIdLabel.getText());
        ((CustomerManagement) bookStoreArray[0]).setcustPassword(customerPasswordLabel.getText());
        bookStoreArray[0].setName(customerNameLabel.getText());
        ((CustomerManagement) bookStoreArray[0]).setcustGender(customerGender.getSelectedItem().toString());

        // Update customer details to the database
        removeCustomerFromDataBase(bookStoreArray[0].getId());
        addCustomerToDataBase(
            bookStoreArray[0].getId(),
            ((CustomerManagement) bookStoreArray[0]).getcustPassword(),
            bookStoreArray[0].getName(),
            ((CustomerManagement) bookStoreArray[0]).getcustGender()
        );
        
        DefaultTableModel model = (DefaultTableModel) customerInventoryTable.getModel();
         
        // If a single row is selected
        if (customerInventoryTable.getSelectedRowCount() == 1) {
            if (customerIdLabel.getText().isEmpty() || customerNameLabel.getText().isEmpty()|| customerPasswordLabel.getText().isEmpty() || customerGender.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Missing required information. Please complete all fields.");
                return;
            }
            
            model.setValueAt(bookStoreArray[0].getId(), customerInventoryTable.getSelectedRow(), 0);
            model.setValueAt(((CustomerManagement) bookStoreArray[0]).getcustPassword().toString(), customerInventoryTable.getSelectedRow(), 1);
            model.setValueAt(bookStoreArray[0].getName(), customerInventoryTable.getSelectedRow(), 2);
            model.setValueAt(((CustomerManagement) bookStoreArray[0]).getcustGender(), customerInventoryTable.getSelectedRow(), 3);

            JOptionPane.showMessageDialog(this, "Record Updated Successfully");
        } else {
            if (customerInventoryTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No data available in the table.");
            } else if (customerInventoryTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
            } else {
            // If multiple rows are selected
                JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
            }
        }

        customerIdLabel.setText(null);
        customerPasswordLabel.setText(null);
        customerNameLabel.setText(null);
        customerGender.setSelectedItem(null);
    }//GEN-LAST:event_updateCustomerActionPerformed

     /**
     * deleteCustomerActionPerformed
     * This method is called when the "Delete" button on customer management is clicked.
     * @param evt 
     */
    private void deleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerActionPerformed
        // Setting the updated customer details to the CustomerManagement instance
        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new CustomerManagement();

        bookStoreArray[0].setId(customerIdLabel.getText());
        ((CustomerManagement) bookStoreArray[0]).setcustPassword(customerPasswordLabel.getText());
        bookStoreArray[0].setName(customerNameLabel.getText());
        ((CustomerManagement) bookStoreArray[0]).setcustGender(customerGender.getSelectedItem().toString());

        // Delete customer data from the database
        removeCustomerFromDataBase(bookStoreArray[0].getId());
        
        DefaultTableModel model = (DefaultTableModel) customerInventoryTable.getModel();

        if (customerInventoryTable.getSelectedRowCount() == 1) {
            model.removeRow(customerInventoryTable.getSelectedRow());
            JOptionPane.showMessageDialog(null, "Customer successfully deleted.");
        } else if (customerInventoryTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No data available in the table.");
        } else if (customerInventoryTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please choose a single row to perform the update.");
        // If multiple rows are selected
        } else {
            JOptionPane.showMessageDialog(null, "lease choose a single row to perform the update.");
        }

        customerIdLabel.setText(null);
        customerPasswordLabel.setText(null);
        customerNameLabel.setText(null);
        customerGender.setSelectedItem(null);
    }//GEN-LAST:event_deleteCustomerActionPerformed
    
    /**
     * clearCustomerActionPerformed
     * This method is called when the "Clear" button on customer management is clicked.
     * It resets the values of various UI components.
     * @param evt 
     */
    private void clearCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCustomerActionPerformed
        customerIdLabel.setText(null);
        customerNameLabel.setText(null);
        customerPasswordLabel.setText(null);
        customerGender.setSelectedItem(null);
    }//GEN-LAST:event_clearCustomerActionPerformed

    /**
     * logoutActionPerformed
     * This method is called when the user clicks the logout icon button.
     * @param evt
     */
    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        Login login = new Login();
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * customerInventoryTableMouseClicked
     * This method is called when the user clicks on a row in the customerInventoryTable component.
     * Retrieves relevant data from the selected row index.
     * @param evt The mouse click event.
     */
    private void customerInventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerInventoryTableMouseClicked
        int index = customerInventoryTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) customerInventoryTable.getModel();

        customerIdLabel.setText(model.getValueAt(index, 0).toString());
        customerPasswordLabel.setText(model.getValueAt(index, 1).toString());
        customerNameLabel.setText(model.getValueAt(index, 2).toString());
        customerGender.setSelectedItem(model.getValueAt(index, 3).toString());
    }//GEN-LAST:event_customerInventoryTableMouseClicked

    private void addCustomerToDataBase(String id, String password, String name, String gender) {
        try {
            // Append data to existing file
            FileWriter fw = new FileWriter("customer.txt", true);
            fw.write(id + "/" + password + "/" + name + "/" + gender);
            fw.write(System.getProperty("line.separator"));
            fw.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in adding data to txt file.");
        }
    }
    
    /**
     * removeCustomerFromDataBase
     * This method is used to remove specific line from the "customer.txt" based on the customer ID
     * user chose.
     * @param id 
     */
    private void removeCustomerFromDataBase(String id) {
        String fileName = "customer.txt";
        String tempFile = "temp.txt";
        
        File oldFile = new File(fileName);
        File newFile = new File(tempFile);
        
        try {

            FileReader fr = new FileReader(oldFile);
            BufferedReader br = new BufferedReader(fr);
            
            FileWriter fw = new FileWriter(newFile);
            BufferedWriter bw = new BufferedWriter(fw);
            
            String line;
            
            while ((line = br.readLine()) != null) {
                int slashIndex = line.indexOf("/");
                if (slashIndex != -1) {
                    String specifiedId = line.substring(0, slashIndex);
                    // Skipping the data line that corresponds to the ID user chose to order
                    if (specifiedId.equals(id)) {
                        continue;
                    }
                }
                // Write non-matching lines to "temp.txt"
                bw.write(line);
                bw.newLine();
            }
            bw.close();
            fr.close();
            
            oldFile.delete();
            newFile.renameTo(oldFile);
//            System.out.println(new File(".").getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in deleting data from txt file.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBook;
    private javax.swing.JButton addCustomer;
    private javax.swing.JTabbedPane adminScreen;
    private javax.swing.JLabel authorSubtitle;
    private javax.swing.JTextField bookAuthorLabel;
    private javax.swing.JLabel bookIDSubtitle;
    private javax.swing.JTextField bookIdLabel;
    private javax.swing.JTextField bookImage;
    private javax.swing.JLabel bookImageLabel;
    private javax.swing.JLabel bookInventorySubtitle;
    private javax.swing.JTable bookInventoryTable;
    private javax.swing.JScrollPane bookInventoryTableScroll;
    private javax.swing.JPanel bookManagementTab;
    private javax.swing.JTextField bookPriceLabel;
    private javax.swing.JTextField bookQtyLabel;
    private javax.swing.JTextField bookSynopsis;
    private javax.swing.JLabel bookSynopsisLabel;
    private javax.swing.JScrollPane bookSynopsisScroll;
    private javax.swing.JTextField bookTitleLabel;
    private javax.swing.JPanel borderPanel;
    private javax.swing.JButton clearBook;
    private javax.swing.JButton clearCustomer;
    private javax.swing.JComboBox<String> customerGender;
    private javax.swing.JLabel customerIDSubtitle;
    private javax.swing.JTextField customerIdLabel;
    private javax.swing.JLabel customerInventorySubtitle;
    private javax.swing.JTable customerInventoryTable;
    private javax.swing.JScrollPane customerInventoryTableScroll;
    private javax.swing.JPanel customerManagementTab;
    private javax.swing.JTextField customerNameLabel;
    private javax.swing.JTextField customerPasswordLabel;
    private javax.swing.JButton deleteBook;
    private javax.swing.JButton deleteCustomer;
    private javax.swing.JLabel genderSubtitle;
    private javax.swing.JLabel logo;
    private javax.swing.JButton logout;
    private javax.swing.JLabel nameSubtitle;
    private javax.swing.JLabel pageTitle1;
    private javax.swing.JLabel pageTitle2;
    private javax.swing.JLabel passwordSubtitle;
    private javax.swing.JLabel priceSubtitle;
    private javax.swing.JLabel qtySubtitle;
    private javax.swing.JLabel titleSubtitle;
    private javax.swing.JButton updateBook;
    private javax.swing.JButton updateCustomer;
    private javax.swing.JButton uploadImage;
    private javax.swing.JButton uploadSynopsis;
    // End of variables declaration//GEN-END:variables
}
