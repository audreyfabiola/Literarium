package Literarium;

import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.Image;
import javax.swing.ImageIcon;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.awt.Font;
import java.awt.FontMetrics;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;

/**
 *
 * @author Clarissa Audrey Fabiola
 */
public class Store extends javax.swing.JFrame {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        borderPanel = new javax.swing.JPanel();
        storePage = new javax.swing.JPanel();
        pageTitle = new javax.swing.JLabel();
        authorSubtitle = new javax.swing.JLabel();
        bookTitleLabel = new javax.swing.JTextField();
        qtySubtitle = new javax.swing.JLabel();
        bookQtyLabel = new javax.swing.JTextField();
        cancel = new javax.swing.JButton();
        bookTableScroll = new javax.swing.JScrollPane();
        bookStoreTable = new javax.swing.JTable();
        searchSubtitle = new javax.swing.JLabel();
        addToBill = new javax.swing.JButton();
        billScroll = new javax.swing.JScrollPane();
        billText = new javax.swing.JTextArea();
        printBill = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        priceSubtitle = new javax.swing.JLabel();
        bookPriceLabel = new javax.swing.JTextField();
        searchIcon = new javax.swing.JLabel();
        billSubtitle = new javax.swing.JLabel();
        titleSubtitle = new javax.swing.JLabel();
        bookAuthorLabel = new javax.swing.JTextField();
        bookImageLabel = new javax.swing.JLabel();
        bookSynopsisScroll = new javax.swing.JScrollPane();
        bookSynopsisLabel = new javax.swing.JLabel();
        clearBill = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        logo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        borderPanel.setBackground(new java.awt.Color(217, 185, 155));

        storePage.setBackground(new java.awt.Color(250, 250, 250));

        pageTitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 36)); // NOI18N
        pageTitle.setForeground(new java.awt.Color(123, 63, 0));
        pageTitle.setText("STORE");

        authorSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        authorSubtitle.setForeground(new java.awt.Color(123, 63, 0));
        authorSubtitle.setText("AUTHOR");

        bookTitleLabel.setEditable(false);
        bookTitleLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        bookTitleLabel.setForeground(new java.awt.Color(102, 102, 102));
        bookTitleLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        qtySubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        qtySubtitle.setForeground(new java.awt.Color(123, 63, 0));
        qtySubtitle.setText("QUANTITY");

        bookQtyLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        bookQtyLabel.setForeground(new java.awt.Color(102, 102, 102));
        bookQtyLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cancel.setBackground(new java.awt.Color(123, 63, 0));
        cancel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 18)); // NOI18N
        cancel.setForeground(new java.awt.Color(255, 255, 255));
        cancel.setText("Cancel");
        cancel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cancel.setBorderPainted(false);
        cancel.setPreferredSize(new java.awt.Dimension(78, 43));
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        bookStoreTable.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        bookStoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TITLE", "PRICE", "QUANTITY", "AUTHOR"
            }
        )
        {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        }

    );
    bookStoreTable.setSelectionBackground(new java.awt.Color(217, 185, 155));
    bookStoreTable.setSelectionForeground(new java.awt.Color(102, 102, 102));
    bookStoreTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            bookStoreTableMouseClicked(evt);
        }
    });
    bookTableScroll.setViewportView(bookStoreTable);
    if (bookStoreTable.getColumnModel().getColumnCount() > 0) {
        bookStoreTable.getColumnModel().getColumn(2).setResizable(false);
    }

    searchSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 20)); // NOI18N
    searchSubtitle.setForeground(new java.awt.Color(123, 63, 0));
    searchSubtitle.setText("Book Available");

    addToBill.setBackground(new java.awt.Color(123, 63, 0));
    addToBill.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 18)); // NOI18N
    addToBill.setForeground(new java.awt.Color(255, 255, 255));
    addToBill.setText("Add to Bill");
    addToBill.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    addToBill.setBorderPainted(false);
    addToBill.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addToBillActionPerformed(evt);
        }
    });

    billText.setEditable(false);
    billText.setColumns(20);
    billText.setRows(5);
    billScroll.setViewportView(billText);

    printBill.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
    printBill.setText("Print");
    printBill.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            printBillActionPerformed(evt);
        }
    });

    search.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    search.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            searchKeyReleased(evt);
        }
    });

    priceSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
    priceSubtitle.setForeground(new java.awt.Color(123, 63, 0));
    priceSubtitle.setText("PRICE");

    bookPriceLabel.setEditable(false);
    bookPriceLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
    bookPriceLabel.setForeground(new java.awt.Color(102, 102, 102));
    bookPriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    searchIcon.setBackground(new java.awt.Color(255, 255, 255));
    searchIcon.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
    searchIcon.setForeground(new java.awt.Color(123, 63, 0));
    searchIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Literarium/Images/Search.png"))); // NOI18N

    billSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 20)); // NOI18N
    billSubtitle.setForeground(new java.awt.Color(123, 63, 0));
    billSubtitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    billSubtitle.setText("Bill");

    titleSubtitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
    titleSubtitle.setForeground(new java.awt.Color(123, 63, 0));
    titleSubtitle.setText("TITLE");

    bookAuthorLabel.setEditable(false);
    bookAuthorLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
    bookAuthorLabel.setForeground(new java.awt.Color(102, 102, 102));
    bookAuthorLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    bookImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    bookSynopsisLabel.setBackground(new java.awt.Color(255, 255, 255));
    bookSynopsisLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
    bookSynopsisLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    bookSynopsisLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    bookSynopsisScroll.setViewportView(bookSynopsisLabel);

    clearBill.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
    clearBill.setText("Clear");
    clearBill.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearBillActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout storePageLayout = new javax.swing.GroupLayout(storePage);
    storePage.setLayout(storePageLayout);
    storePageLayout.setHorizontalGroup(
        storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(storePageLayout.createSequentialGroup()
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(storePageLayout.createSequentialGroup()
                    .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(storePageLayout.createSequentialGroup()
                            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(storePageLayout.createSequentialGroup()
                                    .addGap(56, 56, 56)
                                    .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(titleSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(priceSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(73, 73, 73))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storePageLayout.createSequentialGroup()
                                    .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(qtySubtitle)
                                        .addComponent(authorSubtitle))
                                    .addGap(59, 59, 59)))
                            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bookTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bookPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bookAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(storePageLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(52, 52, 52)
                            .addComponent(addToBill, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(370, 370, 370))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storePageLayout.createSequentialGroup()
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addComponent(searchIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 265, Short.MAX_VALUE)
            .addComponent(billSubtitle)
            .addGap(200, 200, 200))
        .addGroup(storePageLayout.createSequentialGroup()
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(storePageLayout.createSequentialGroup()
                    .addGap(179, 179, 179)
                    .addComponent(bookQtyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(50, 50, 50)
                    .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(bookSynopsisScroll)
                        .addComponent(bookTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addComponent(billScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(storePageLayout.createSequentialGroup()
                    .addGap(527, 527, 527)
                    .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pageTitle)
                        .addComponent(searchSubtitle))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storePageLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(clearBill)
            .addGap(54, 54, 54)
            .addComponent(printBill)
            .addGap(122, 122, 122))
        .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storePageLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(bookImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(926, Short.MAX_VALUE)))
    );
    storePageLayout.setVerticalGroup(
        storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(storePageLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pageTitle)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(searchSubtitle)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(billSubtitle))
            .addGap(18, 18, 18)
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(storePageLayout.createSequentialGroup()
                    .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(storePageLayout.createSequentialGroup()
                            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(storePageLayout.createSequentialGroup()
                                    .addGap(131, 131, 131)
                                    .addComponent(bookQtyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(storePageLayout.createSequentialGroup()
                                    .addGap(125, 125, 125)
                                    .addComponent(qtySubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addToBill, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(bookTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(33, 33, 33)
                    .addComponent(bookSynopsisScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(billScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(printBill)
                .addComponent(clearBill))
            .addContainerGap(11, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storePageLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bookAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(authorSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(titleSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(bookTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(priceSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(bookPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(470, 470, 470))
        .addGroup(storePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storePageLayout.createSequentialGroup()
                .addContainerGap(420, Short.MAX_VALUE)
                .addComponent(bookImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)))
    );

    logout.setBackground(new java.awt.Color(217, 185, 155));
    logout.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 16)); // NOI18N
    logout.setForeground(new java.awt.Color(255, 255, 255));
    logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Literarium/Images/Logout.png"))); // NOI18N
    logout.setBorder(null);
    logout.setBorderPainted(false);
    logout.setContentAreaFilled(false);
    logout.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logoutActionPerformed(evt);
        }
    });

    logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Literarium/Images/Logo2.png"))); // NOI18N

    javax.swing.GroupLayout borderPanelLayout = new javax.swing.GroupLayout(borderPanel);
    borderPanel.setLayout(borderPanelLayout);
    borderPanelLayout.setHorizontalGroup(
        borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(borderPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(storePage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(borderPanelLayout.createSequentialGroup()
                    .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    borderPanelLayout.setVerticalGroup(
        borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(borderPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
            .addComponent(storePage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    logout.getAccessibleContext().setAccessibleDescription("");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(borderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(borderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializes the components of the store page.
     */
    public Store() {
        initComponents();
        
        // Convert book.txt into rows of a table.
        try {
            String fileName = "book.txt";
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);  
            DefaultTableModel model = (DefaultTableModel) bookStoreTable.getModel();
            
            String line;
      
            while ((line = br.readLine()) != null) {
                if (line != null) {
                    String[] dataRow = line.split("/");
                    model.addRow(dataRow);
                }
            }
        } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
    }

    /**
     * logoutActionPerformed
     * This method is called when the user clicks the logout icon button.
     * @param evt
     */
    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        Login login = new Login();
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * bookStoreTableMouseClicked
     * This method is called when the user clicks on a row in the bookStoreTable component.
     * Retrieves relevant data from the selected row index and populate labels and image icon.
     * @param evt The mouse click event.
     */
    private void bookStoreTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookStoreTableMouseClicked
        int index = bookStoreTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) bookStoreTable.getModel();

        id = model.getValueAt(index, 0).toString();
        bookTitleLabel.setText(model.getValueAt(index, 1).toString());
        bookPriceLabel.setText(model.getValueAt(index, 2).toString());
        bookAuthorLabel.setText(model.getValueAt(index, 4).toString());

        String bookImage = "";
        String bookSynopsis = "";

        try {
            FileReader fr = new FileReader("book.txt");
            BufferedReader br = new BufferedReader(fr);
            
            String line;
            String IDData = model.getValueAt(index, 0).toString(); 
            
            // Add image and book synopsis according to the book id
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("/");
                if (parts.length >= 1 && parts[0].equals(IDData)) {
                    bookImage = "src/Books/" + parts[0] + ".jpg";
                    String bookSynopsisFileName = "src/Books/" + parts[0] + ".txt";
                    bookSynopsis = readTextFromFile(bookSynopsisFileName);
                }
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
        
        // Ensure that there is a valid image path before attempting to load image
        if (!bookImage.isEmpty()) {
            try {
                ImageIcon icon = new ImageIcon(bookImage);
                Image image = icon.getImage().getScaledInstance(bookImageLabel.getWidth(), bookImageLabel.getHeight(), Image.SCALE_SMOOTH);
                bookImageLabel.setIcon(new ImageIcon(image));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error loading image");
            }
        }
        
        // Set the font and text style for the book synopsis
        bookSynopsisLabel.setText("<html>" + wrapText(bookSynopsis, bookSynopsisLabel.getWidth(), bookSynopsisLabel.getHeight()) + "</html>");
        Font labelFont = bookSynopsisLabel.getFont();
        bookSynopsisLabel.setFont(new Font(labelFont.getName(), Font.PLAIN, 13));  
    }//GEN-LAST:event_bookStoreTableMouseClicked


    /**
     * readTextFromFile
     * This method reads the content from a file and returns it as a string.
     * @param fileName
     * @return 
     */
    private String readTextFromFile(String fileName) {
        StringBuilder sb = new StringBuilder();

        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);  

            String line;

            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "File not found.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading the file.");
        }
        
        return sb.toString();
    }
    
    /**
     * wrapText
     * This method wraps a given text to fit within the specified width and height, adding line breaks if necessary.
     * @param text
     * @param width
     * @param height
     * @return 
     */
    private String wrapText(String text, int width, int height) {
        FontMetrics metrics = bookSynopsisLabel.getFontMetrics(bookSynopsisLabel.getFont());
        StringBuilder wrappedText = new StringBuilder();

        // Line width and height represents the maximum size available for displaying text on a single line
        int lineWidth = 0;
        
        // Split a string by space or whitespace characters
        String[] words = text.split("\\s+"); 

        for (String word : words) {
            int wordWidth = metrics.stringWidth(word);
            int wordWithSpaceWidth = wordWidth + metrics.stringWidth(" ");
            
            if (lineWidth + wordWithSpaceWidth <= width) {
                wrappedText.append(word).append(" ");
                lineWidth += wordWithSpaceWidth;
            } else {
                wrappedText.append("<br>").append(word).append(" ");
                lineWidth = wordWithSpaceWidth;
            }
        }
        return wrappedText.toString();
    }
    
    int count = 0;
    String id;
    double total;
    double netTotal = 0;
       
    /**
     * addToBillActionPerformed
     * This method is called when the "Add to Bill" button is clicked.
     * To update the database and get user order to the bill.
     * @param evt 
     */
    private void addToBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBillActionPerformed
        if (bookTitleLabel.getText().isEmpty() || bookPriceLabel.getText().isEmpty() || bookQtyLabel.getText().isEmpty() || bookAuthorLabel.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Incomplete data.");
            return;
        }
                
        try {
            int qty = Integer.parseInt(bookQtyLabel.getText());
            if (qty <= 0) {
                JOptionPane.showMessageDialog(null, "Please enter only a positive integer.");
                return;
            }
        // If inputted value is not an integer
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter only a positive integer.");
        }
        
        // Update quantity of the book
        DefaultTableModel model = (DefaultTableModel) bookStoreTable.getModel();
        BookStore[] bookStoreArray = new BookStore[1];
        bookStoreArray[0] = new BookManagement();

        Integer updatedQty = 0;
        
        // Iterating through the rows to find the product with matching book ID that was clicked from the table
        for (int i = 0; i < bookStoreTable.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(id)) {
                updatedQty = Integer.parseInt(model.getValueAt(i, 3).toString()) - Integer.parseInt(bookQtyLabel.getText());

                // Setting the modified book details to the BookManagement instance
                bookStoreArray[0].setId(model.getValueAt(i, 0).toString().trim());
                bookStoreArray[0].setName(model.getValueAt(i, 1).toString().trim());
                ((BookManagement) bookStoreArray[0]).setPrice(model.getValueAt(i, 2).toString().trim());
                ((BookManagement) bookStoreArray[0]).setQty(model.getValueAt(i, 3).toString().trim());
                ((BookManagement) bookStoreArray[0]).setAuthor(model.getValueAt(i, 4).toString().trim());

                // Update the table with updated value
                if (updatedQty >= 0) {
                   model.setValueAt(updatedQty, i, 3);
                   break;
                } else {
                    JOptionPane.showMessageDialog(null, "Unable to place order. Insufficient quantity available.");
                    break;
                }
            }
        }
        
        // Adding order to the bill text area
        if (updatedQty >= 0) {
            count++;        
            total = Double.parseDouble(bookPriceLabel.getText()) * (Double.valueOf(bookQtyLabel.getText()));
            netTotal += total;
            if (count == 1) {
                billText.setText(billText.getText() + "························································································································\n");
                billText.setText(billText.getText() + "\t\tLiterarium \n");
                billText.setText(billText.getText() + "························································································································\n");
                billText.setText(billText.getText() + "  " + "TITLE" + "\t\t\tPRICE" + "\tQUANTITY" + "\tTOTAL\n " + " " + String.format("%-25s", bookTitleLabel.getText()) + "\t\t" + "$" + bookPriceLabel.getText() + "\t" + bookQtyLabel.getText() + "\t" + "$" + total + "\n");
            }
            if (count > 1) {
                billText.setText(billText.getText() + "  " + String.format("%-25s", bookTitleLabel.getText()) + "\t\t" + "$" + bookPriceLabel.getText() + "\t" + bookQtyLabel.getText() + "\t" + "$" + total + "\n");
            }
            
            // Update book details to the database
            removeBookFromDataBase(bookStoreArray[0].getId());
            addBookToDataBase(
                bookStoreArray[0].getId(),
                bookStoreArray[0].getName(),
                ((BookManagement) bookStoreArray[0]).getPrice(),
                updatedQty.toString(),
                ((BookManagement) bookStoreArray[0]).getAuthor()
            );
        }
        bookAuthorLabel.setText(null);
        bookQtyLabel.setText(null);
        bookTitleLabel.setText(null);
        bookPriceLabel.setText(null);
        bookImageLabel.setIcon(null);
        bookSynopsisLabel.setText(null);
    }//GEN-LAST:event_addToBillActionPerformed

     /**
     * removeBookFromDataBase
     * This method is used to remove specific line from the "book.txt" based on the book ID
     * user chose.
     * @param id 
     */
    private void removeBookFromDataBase(String id) {
        String fileName = "book.txt";
        String tempFile = "temp.txt";
        
        File oldFile = new File(fileName);
        File newFile = new File(tempFile);
        
        try {
            FileReader fr = new FileReader(oldFile);
            BufferedReader br = new BufferedReader(fr);
            
            FileWriter fw = new FileWriter(newFile);
            BufferedWriter bw = new BufferedWriter(fw);
            
            String line;
                    
            while ((line = br.readLine()) != null) {
                int slashIndex = line.indexOf("/");
                if (slashIndex != -1) {
                    String specifiedId = line.substring(0, slashIndex);
                    // Skipping the data line that corresponds to the ID user chose to order
                    if (specifiedId.equals(id)) {
                        continue;
                    }
                }
                // Write non-matching lines to "temp.txt"
                bw.write(line);
                bw.newLine();
            }
            bw.close();
            fr.close();
            
            oldFile.delete();
            newFile.renameTo(oldFile);
//            System.out.println(new File(".").getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in deleting data from txt file.");
        }
    }
    
    
    /**
     * addBookToDataBase
     * This method is used to add a new line of data to the "book.txt" file to update data.
     * @param id
     * @param name
     * @param price
     * @param qty
     * @param author 
     */
    private void addBookToDataBase(String id, String name, String price, String qty, String author) {
        try {
            // Append data to existing file
            FileWriter fw = new FileWriter("book.txt", true);
            fw.write(id + "/" + name + "/" + price + "/" + qty + "/" + author);
            fw.write(System.getProperty("line.separator"));
            fw.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in adding data to txt file.");
     }
    }
    
    /**
     * cancelActionPerformed
     * This method is called when the "Cancel" button is clicked.
     * It resets the values of various UI components.
     * @param evt 
     */
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        bookAuthorLabel.setText(null);
        bookTitleLabel.setText(null);
        bookPriceLabel.setText(null);
        bookQtyLabel.setText(null);
        bookImageLabel.setIcon(null);
        bookSynopsisLabel.setText(null);
    }//GEN-LAST:event_cancelActionPerformed

    
    /**
     * printBillActionPerformed
     * This method is called when the "Print" button is clicked.
     * Generates the bill PDF file and prompts the user to select a directory to save it.
     * @param evt 
     */
    private void printBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBillActionPerformed
        billText.setText(billText.getText() + "························································································································\n");
        billText.setText(billText.getText() + "\t\t\t\tYOUR TOTAL: $" + netTotal);
        billText.setText(billText.getText() + "\n\n********************************************************************************\n");
        billText.setText(billText.getText() + "\t\tTHANK YOU \n");
        billText.setText(billText.getText() + "********************************************************************************\n");

        try {
            billText.print();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to print the bill.");
        }
    }//GEN-LAST:event_printBillActionPerformed

    /**
     * This method is called when customer search in the search field.
     * @param evt 
     */
    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        DefaultTableModel model = (DefaultTableModel) bookStoreTable.getModel();
        
        // Create a new TableRowSorter and associate it with the table model
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        bookStoreTable.setRowSorter(trs);

        // Apply the filter based on the search query (case-insensitive by using (?i))
        trs.setRowFilter(RowFilter.regexFilter("(?i)" + search.getText()));
    }//GEN-LAST:event_searchKeyReleased

    /**
     * clearBillActionPerformed
     * This method is called when the "Clear" button is clicked.
     * @param evt 
     */
    private void clearBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBillActionPerformed
        // TODO add your handling code here:
        billText.setText(null);
        netTotal = 0;
        count = 0;
    }//GEN-LAST:event_clearBillActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToBill;
    private javax.swing.JLabel authorSubtitle;
    private javax.swing.JScrollPane billScroll;
    private javax.swing.JLabel billSubtitle;
    private javax.swing.JTextArea billText;
    private javax.swing.JTextField bookAuthorLabel;
    private javax.swing.JLabel bookImageLabel;
    private javax.swing.JTextField bookPriceLabel;
    private javax.swing.JTextField bookQtyLabel;
    private javax.swing.JTable bookStoreTable;
    private javax.swing.JLabel bookSynopsisLabel;
    private javax.swing.JScrollPane bookSynopsisScroll;
    private javax.swing.JScrollPane bookTableScroll;
    private javax.swing.JTextField bookTitleLabel;
    private javax.swing.JPanel borderPanel;
    private javax.swing.JButton cancel;
    private javax.swing.JButton clearBill;
    private javax.swing.JLabel logo;
    private javax.swing.JButton logout;
    private javax.swing.JLabel pageTitle;
    private javax.swing.JLabel priceSubtitle;
    private javax.swing.JButton printBill;
    private javax.swing.JLabel qtySubtitle;
    private javax.swing.JTextField search;
    private javax.swing.JLabel searchIcon;
    private javax.swing.JLabel searchSubtitle;
    private javax.swing.JPanel storePage;
    private javax.swing.JLabel titleSubtitle;
    // End of variables declaration//GEN-END:variables
}
